???? 5:


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity updown5bitCounter is
port(
        dir,rst,clk: in std_logic;
        y: out std_logic_vector(4 downto 0)
);
end updown5bitCounter;

architecture Behavioral of updown5bitCounter is
    signal count: std_logic_vector(4 downto 0):= (others =>'0');
begin
    process(clk , dir)
    begin
        if(rst = '1') then
            count <= (others => '0');
        elsif( clk'event and clk ='1') then
            if(dir = '0') then
                if (count = "10010") then
                    count <= (others => '0');
                else
                    count <= count + '1';
                end if;              
            elsif ( dir = '1') then
                if count = "00000" then
                    count <= "10010";
                else
                    count <= count - '1';
                end if;     
            end if;
         end if;
    end process;
    y <= count;



end Behavioral;


 










???? 6:


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity FSMDescription is
port(
    x,rst,clk: in std_logic;
    y: out std_logic
     );
end FSMDescription;

architecture TwoProcess of FSMDescription is
type State is (stateA, stateB, stateC, stateD);
signal current_state , next_state : State;  
begin

    process ( clk , rst)
    begin
        if(rst = '1') then
            current_state <= stateA;
        elsif( clk'event and clk ='1') then
            current_state <= next_state;
        end if;
    end process;
    
    process (current_state , x)
    begin  
        case current_state is
         when stateA =>
            y <= '0';
            if( x = '1') then
                next_state <= stateB;
            else
                next_state <= stateA;
            end if;
         when stateB =>
            y <= '0';
            if( x = '1') then
             next_state <= stateC;
          else
             next_state <= stateA;
          end if;
         when stateC =>
            y <= '0';
            if( x = '1') then
             next_state <= stateD;
         else
             next_state <= stateA;
         end if;
         when others =>
            y <= '1';
            if( x = '1') then
             next_state <= stateD;
         else
             next_state <= stateA;
         end if;
        end case;
    end process;
end TwoProcess;

architecture ThreeProcess of FSMDescription is
type State is (stateA, stateB, stateC, stateD);
signal current_state , next_state : State;  
begin

    process ( clk , rst)
    begin
        if(rst = '1') then
            current_state <= stateA;
        elsif( clk'event and clk ='1') then
            current_state <= next_state;
        end if;
    end process;
    
    process (current_state , x)
    begin  
        case current_state is
         when stateA =>
            if( x = '1') then
                next_state <= stateB;
            else
                next_state <= stateA;
            end if;
         when stateB =>
            if( x = '1') then
             next_state <= stateC;
          else
             next_state <= stateA;
          end if;
         when stateC =>
            if( x = '1') then
             next_state <= stateD;
         else
             next_state <= stateA;
         end if;
         when others =>
            if( x = '1') then
             next_state <= stateD;
         else
             next_state <= stateA;
         end if;
        end case;
    end process;
    
        process ( clk , rst)
        begin
            if(rst = '1') then
                y<='0';
             elsif(rising_edge(clk)) then
                case current_state is
                      when stateA =>
                        y <= '0';
                      when stateB =>
                        y <= '0';
                      when stateC =>
                        y <= '0';
                      when others =>
                        y <= '1';
                   end case;     
            end if;
        end process;
        
end ThreeProcess;

 


???? 7:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

entity module3 is
port(
    clk: in std_logic;
    x: std_logic;
    result: out std_logic_vector(1 downto 0)
     );
end module3;

architecture Behavioral of module3 is
type State is (init,start,s00,s10,s01,s11,s21,s02,s12,s22,s03,s13,s23,s04,s14,s24,s05,s15,s25,s06,s16,s26,s07,s17,s27,s08,s18,s28,s0f,s1f,s2f);
signal current_state , next_state : State;  
signal number : std_logic_vector(7 downto 0);
begin

    process (clk)
    begin
        if( clk'event and clk ='1') then
            current_state <= next_state;
        end if;
    end process;
    
    process (current_state , x)
    
    begin  
        
        case current_state is
         when init =>
            result<="UU";
            if( x = '0') then
             next_state <= init;
            else
             next_state <= start;
            end if;
         when start =>
            result<="UU";
            if( x = '0') then
             next_state <= s00;
            else
             next_state <= s10;
            end if;
          when s00 =>
            result<="UU";
            if( x = '0') then
               next_state <= s01;
            else
               next_state <= s11;
            end if;
          when s10 =>
            result<="UU";
            if( x = '0') then
                next_state <= s01;
            else
                next_state <= s21;
            end if;
          when s01 =>
            result<="UU";
              if( x = '0') then
                 next_state <= s02;
              else
                 next_state <= s12;
              end if;
         when s11 =>
            result<="UU";
              if( x = '0') then
                  next_state <= s02;
              else
                  next_state <= s22;
              end if;
         when s21 =>
            result<="UU";
              if( x = '0') then
                next_state <= s11;
              else
                next_state <= s22;
              end if;
         when s02 =>
           result<="UU";
           if( x = '0') then
            next_state <= s03;
           else
            next_state <= s13;
           end if;
         when s12 =>
            result<="UU";
            if( x = '0') then
                next_state <= s03;
            else
                next_state <= s23;
            end if;
          when s22 =>
            result<="UU";
            if( x = '0') then
                next_state <= s13;
            else
                next_state <= s23;
            end if;
          when s03 =>
            result<="UU";
            if( x = '0') then
                next_state <= s04;
            else
                next_state <= s14;
            end if;
          when s13 =>
            result<="UU";
            if( x = '0') then
                next_state <= s04;
            else
                next_state <= s24;
            end if;
          when s23 =>
            result<="UU";
            if( x = '0') then
                next_state <= s14;
            else
                next_state <= s24;
            end if;
          when s04 =>
            result<="UU";
            if( x = '0') then
                next_state <= s05;
            else
                next_state <= s15;
            end if;
          when s14 =>
            result<="UU";
            if( x = '0') then
                next_state <= s05;
            else
                next_state <= s25;
            end if;
          when s24 =>
            result<="UU";
                if( x = '0') then
                    next_state <= s15;
                else
                    next_state <= s25;
                end if;
          when s05 =>
            result<="UU";
            if( x = '0') then
                next_state <= s06;
            else
                next_state <= s16;
            end if;
          when s15 =>
            result<="UU";
            if( x = '0') then
                next_state <= s06;
            else
                next_state <= s26;
            end if;
          when s25 =>
            result<="UU";
            if( x = '0') then
                next_state <= s16;
            else
                next_state <= s26;
            end if;
          when s06 =>
            result<="UU";
            if( x = '0') then
                next_state <= s07;
            else
                next_state <= s17;
            end if;
          when s16 =>
            result<="UU";
            if( x = '0') then
                next_state <= s07;
            else
                next_state <= s27;
            end if;
          when s26 =>
            result<="UU";
            if( x = '0') then
                next_state <= s17;
            else
                next_state <= s27;
            end if;
          when s07 =>
            result<="UU";
            if( x = '0') then
                next_state <= s0f;
            else
                next_state <= s1f;
            end if;
          when s17 =>
            result<="UU";
            if( x = '0') then
                next_state <= s0f;
            else
                next_state <= s2f;
            end if;
          when s27 =>
            result<="UU";
            if( x = '0') then
                next_state <= s1f;
            else
                next_state <= s2f;
            end if;
          when s0f =>
            result<="00";
            if( x = '0') then
                next_state <= init;
            else
                next_state <= start;
            end if;
          when s1f =>
            result<="01";
            if( x = '0') then
                next_state <= init;
            else
                next_state <= start;
            end if;
          when s2f =>
            result<="10";
            if( x = '0') then
                next_state <= init;
            else
                next_state <= start;
            end if;                                                                                                                                                                                                                    
        when others =>
            result<="UU";
            if( x = '1') then
             next_state <= start;
            else
             next_state <= init;
            end if;           
        end case;
    end process;

end Behavioral;

 



???? 8:

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;


entity average is
port(
    
    clk: in std_logic;
    input: in integer;
    output: inout integer :=0
);
end average;

architecture Behavioral of average is

    type mytype is array (0 to 1) of integer;
    
    function  calculate  (Finput  :  in  mytype)  return  integer  is                                                                                                     
      begin                                                        
        add: if Finput(0)>0 then
        
            return Finput(0)+Finput(1);
        end if add;
        result: if Finput(0)=0 then
                    return Finput(1)/16;
        end if result; 
                                                        
    end function; 
    signal temp: integer;
begin
    temp <= output ;
    process(clk, input)
    begin
        if( clk'event and clk ='1') then
            output <= calculate((input,temp));
        end if;
    end process;
end Behavioral;

 

???? 9:


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity sequenceDetector is
port(
    rst,clk: in std_logic;
    x: in character;
    y: out std_logic_vector(1 downto 0)
     );
end sequenceDetector;

architecture Behavioral of sequenceDetector is
type State is (init, p1, p2, p3, p4, p5, p6, p7 , p8, p9, q1, q2, q3, q4);
signal current_state , next_state : State;  
begin

    process ( clk , rst)
    begin
       if( clk'event and clk ='1') then
            current_state <= next_state;
        end if;
    end process;
    
    process (current_state , x)
    begin  
        case current_state is
         when init =>
            y <= "00";
            if( x = 'A') then
                next_state <= q1;
            elsif ( x = 'G') then
                next_state <= p1;
            else
                next_state <= init;
            end if;
         when p1 =>
            y <= "00";
            if( x = 'A') then
                next_state <= p2;
            else
                next_state <= init;
            end if;
         when p2 =>
            y <= "00";
            if( x = 'T') then
                next_state <= p3;
            else
                next_state <= init;
            end if;   
         when p3 =>
            y <= "00";
            if( x = 'A') then
                next_state <= p4;
            else
                next_state <= init;
            end if;            
         when p4 =>
            y <= "00";
            if( x = 'T') then
                next_state <= p5;
            else
                next_state <= init;
            end if;            
         when p5 =>
            y <= "00";
            if( x = 'A') then
                next_state <= p6;
            else
                next_state <= init;
            end if;            
         when p6 =>
            y <= "00";
            if( x = 'T') then
                next_state <= p7;
            else
                next_state <= init;
            end if;            
         when p7 =>
            y <= "00";
            if( x = 'G') then
                next_state <= p8;
             else
                next_state <= init;
             end if;
         when p8 =>
            y <= "00";
            if( x = 'C') then
                next_state <= p9;
            else
                next_state <= init;
            end if;                        
         when p9 =>
               y <= "01";
               if( x = 'G') then
                   next_state <= p1;
               elsif( x = 'A') then
                   next_state <= q1;    
               else
                   next_state <= init;
               end if;
         when q1 =>
            y <= "00";
            if( x = 'C') then
                next_state <= q2;    
            else
                next_state <= init;
            end if;
         when q2 =>
            y <= "00";
            if( x = 'G') then
                next_state <= q3;
            else
                next_state <= init;
            end if;
         when q3 =>
            y <= "10";
            if( x = 'C') then
                next_state <= q4;    
            elsif( x = 'G') then
               next_state <= p1;
            else
                next_state <= init;
            end if;
         when q4 =>
            y <= "00";
            if( x = 'G') then
                next_state <= q3;    
            else
                next_state <= init;
            end if;
         when others =>
            y <= "00";
            next_state <= init;                                                                                                   
        end case;
    end process;


end Behavioral;

 

